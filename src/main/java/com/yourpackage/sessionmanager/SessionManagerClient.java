package com.yourpackage.sessionmanager;

import net.fabricmc.api.ClientModInitializer;
import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientLifecycleEvents;
import net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.option.KeyBinding;
import net.minecraft.client.util.InputUtil;
import net.minecraft.text.Text;
import org.lwjgl.glfw.GLFW;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;

public class SessionManagerClient implements ClientModInitializer {
    public static final String MOD_ID = "sessionmanager";
    public static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);
    
    private static KeyBinding saveSessionKey;
    private static KeyBinding loadSessionKey;
    
    private static final Path SESSION_FILE = Paths.get("config", "sessionmanager", "session.properties");
    
    @Override
    public void onInitializeClient() {
        LOGGER.info("Initializing Session Manager mod");
        
        // Create config directory
        try {
            Files.createDirectories(SESSION_FILE.getParent());
        } catch (IOException e) {
            LOGGER.error("Failed to create config directory", e);
        }
        
        // Register key bindings
        saveSessionKey = KeyBindingHelper.registerKeyBinding(new KeyBinding(
            "key.sessionmanager.save_session",
            InputUtil.Type.KEYSYM,
            GLFW.GLFW_KEY_F7,
            "category.sessionmanager.keys"
        ));
        
        loadSessionKey = KeyBindingHelper.registerKeyBinding(new KeyBinding(
            "key.sessionmanager.load_session",
            InputUtil.Type.KEYSYM,
            GLFW.GLFW_KEY_F8,
            "category.sessionmanager.keys"
        ));
        
        // Register client tick event for key handling
        ClientLifecycleEvents.CLIENT_STARTED.register(client -> {
            LOGGER.info("Session Manager started - Press F7 to save session, F8 to load session");
        });
        
        // Auto-load session on startup if available
        loadSessionOnStartup();
    }
    
    public static void saveCurrentSession() {
        MinecraftClient client = MinecraftClient.getInstance();
        if (client.getSession() == null) {
            LOGGER.warn("No active session to save");
            return;
        }
        
        try {
            Properties props = new Properties();
            props.setProperty("username", client.getSession().getUsername());
            props.setProperty("uuid", client.getSession().getUuidOrNull() != null ? 
                client.getSession().getUuidOrNull().toString() : "");
            props.setProperty("accessToken", client.getSession().getAccessToken());
            props.setProperty("sessionType", client.getSession().getAccountType().name());
            props.setProperty("timestamp", String.valueOf(System.currentTimeMillis()));
            
            try (FileOutputStream fos = new FileOutputStream(SESSION_FILE.toFile())) {
                props.store(fos, "Minecraft Session Data - Generated by Session Manager Mod");
            }
            
            if (client.player != null) {
                client.player.sendMessage(Text.literal("§aSession saved successfully!"), false);
            }
            LOGGER.info("Session saved for user: {}", client.getSession().getUsername());
            
        } catch (IOException e) {
            LOGGER.error("Failed to save session", e);
            if (client.player != null) {
                client.player.sendMessage(Text.literal("§cFailed to save session!"), false);
            }
        }
    }
    
    public static void loadSavedSession() {
        if (!Files.exists(SESSION_FILE)) {
            LOGGER.info("No saved session file found");
            return;
        }
        
        try {
            Properties props = new Properties();
            try (FileInputStream fis = new FileInputStream(SESSION_FILE.toFile())) {
                props.load(fis);
            }
            
            String username = props.getProperty("username");
            String uuid = props.getProperty("uuid");
            String accessToken = props.getProperty("accessToken");
            String sessionType = props.getProperty("sessionType");
            String timestamp = props.getProperty("timestamp");
            
            if (username == null || accessToken == null) {
                LOGGER.warn("Invalid session data in file");
                return;
            }
            
            // Check if session is not too old (24 hours)
            long savedTime = Long.parseLong(timestamp);
            long currentTime = System.currentTimeMillis();
            if (currentTime - savedTime > 24 * 60 * 60 * 1000) {
                LOGGER.warn("Saved session is too old (>24 hours), skipping auto-load");
                return;
            }
            
            LOGGER.info("Loading saved session for user: {}", username);
            SessionHelper.applySession(username, uuid, accessToken, sessionType);
            
        } catch (Exception e) {
            LOGGER.error("Failed to load saved session", e);
        }
    }
    
    private void loadSessionOnStartup() {
        // Auto-load session after a short delay to ensure client is fully initialized
        new Thread(() -> {
            try {
                Thread.sleep(2000); // Wait 2 seconds
                loadSavedSession();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }).start();
    }
    
    public static boolean wasKeyPressed(KeyBinding key) {
        while (key.wasPressed()) {
            return true;
        }
        return false;
    }
}
